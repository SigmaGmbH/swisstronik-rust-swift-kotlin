// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: protobuf_contracts/contract.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ffi.contract;

@kotlin.jvm.JvmName("-initializedeoxysIIEncryptFailureResponse")
public inline fun deoxysIIEncryptFailureResponse(block: ffi.contract.DeoxysIIEncryptFailureResponseKt.Dsl.() -> kotlin.Unit): ffi.contract.Contract.DeoxysIIEncryptFailureResponse =
  ffi.contract.DeoxysIIEncryptFailureResponseKt.Dsl._create(ffi.contract.Contract.DeoxysIIEncryptFailureResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `ffi.contract.DeoxysIIEncryptFailureResponse`
 */
public object DeoxysIIEncryptFailureResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ffi.contract.Contract.DeoxysIIEncryptFailureResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ffi.contract.Contract.DeoxysIIEncryptFailureResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ffi.contract.Contract.DeoxysIIEncryptFailureResponse = _builder.build()

    /**
     * `string encryption_error = 1;`
     */
    public var encryptionError: kotlin.String
      @JvmName("getEncryptionError")
      get() = _builder.getEncryptionError()
      @JvmName("setEncryptionError")
      set(value) {
        _builder.setEncryptionError(value)
      }
    /**
     * `string encryption_error = 1;`
     */
    public fun clearEncryptionError() {
      _builder.clearEncryptionError()
    }
    /**
     * `string encryption_error = 1;`
     * @return Whether the encryptionError field is set.
     */
    public fun hasEncryptionError(): kotlin.Boolean {
      return _builder.hasEncryptionError()
    }
    public val errorCase: ffi.contract.Contract.DeoxysIIEncryptFailureResponse.ErrorCase
      @JvmName("getErrorCase")
      get() = _builder.getErrorCase()

    public fun clearError() {
      _builder.clearError()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ffi.contract.Contract.DeoxysIIEncryptFailureResponse.copy(block: ffi.contract.DeoxysIIEncryptFailureResponseKt.Dsl.() -> kotlin.Unit): ffi.contract.Contract.DeoxysIIEncryptFailureResponse =
  ffi.contract.DeoxysIIEncryptFailureResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

