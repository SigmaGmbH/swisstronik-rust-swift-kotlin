// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: protobuf_contracts/contract.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ffi.contract;

@kotlin.jvm.JvmName("-initializedeoxysIIDecryptFailureResponse")
public inline fun deoxysIIDecryptFailureResponse(block: ffi.contract.DeoxysIIDecryptFailureResponseKt.Dsl.() -> kotlin.Unit): ffi.contract.Contract.DeoxysIIDecryptFailureResponse =
  ffi.contract.DeoxysIIDecryptFailureResponseKt.Dsl._create(ffi.contract.Contract.DeoxysIIDecryptFailureResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `ffi.contract.DeoxysIIDecryptFailureResponse`
 */
public object DeoxysIIDecryptFailureResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ffi.contract.Contract.DeoxysIIDecryptFailureResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ffi.contract.Contract.DeoxysIIDecryptFailureResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ffi.contract.Contract.DeoxysIIDecryptFailureResponse = _builder.build()

    /**
     * `string decryption_error = 1;`
     */
    public var decryptionError: kotlin.String
      @JvmName("getDecryptionError")
      get() = _builder.getDecryptionError()
      @JvmName("setDecryptionError")
      set(value) {
        _builder.setDecryptionError(value)
      }
    /**
     * `string decryption_error = 1;`
     */
    public fun clearDecryptionError() {
      _builder.clearDecryptionError()
    }
    /**
     * `string decryption_error = 1;`
     * @return Whether the decryptionError field is set.
     */
    public fun hasDecryptionError(): kotlin.Boolean {
      return _builder.hasDecryptionError()
    }
    public val errorCase: ffi.contract.Contract.DeoxysIIDecryptFailureResponse.ErrorCase
      @JvmName("getErrorCase")
      get() = _builder.getErrorCase()

    public fun clearError() {
      _builder.clearError()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ffi.contract.Contract.DeoxysIIDecryptFailureResponse.copy(block: ffi.contract.DeoxysIIDecryptFailureResponseKt.Dsl.() -> kotlin.Unit): ffi.contract.Contract.DeoxysIIDecryptFailureResponse =
  ffi.contract.DeoxysIIDecryptFailureResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

