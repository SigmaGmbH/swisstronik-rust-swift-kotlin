// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: protobuf_contracts/contract.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ffi.contract;

@kotlin.jvm.JvmName("-initializefFIRequest")
public inline fun fFIRequest(block: ffi.contract.FFIRequestKt.Dsl.() -> kotlin.Unit): ffi.contract.Contract.FFIRequest =
  ffi.contract.FFIRequestKt.Dsl._create(ffi.contract.Contract.FFIRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `ffi.contract.FFIRequest`
 */
public object FFIRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ffi.contract.Contract.FFIRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ffi.contract.Contract.FFIRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ffi.contract.Contract.FFIRequest = _builder.build()

    /**
     * `.ffi.contract.DeoxysIIEncryptRequest encrypt = 1;`
     */
    public var encrypt: ffi.contract.Contract.DeoxysIIEncryptRequest
      @JvmName("getEncrypt")
      get() = _builder.getEncrypt()
      @JvmName("setEncrypt")
      set(value) {
        _builder.setEncrypt(value)
      }
    /**
     * `.ffi.contract.DeoxysIIEncryptRequest encrypt = 1;`
     */
    public fun clearEncrypt() {
      _builder.clearEncrypt()
    }
    /**
     * `.ffi.contract.DeoxysIIEncryptRequest encrypt = 1;`
     * @return Whether the encrypt field is set.
     */
    public fun hasEncrypt(): kotlin.Boolean {
      return _builder.hasEncrypt()
    }

    /**
     * `.ffi.contract.DeoxysIIDecryptRequest decrypt = 2;`
     */
    public var decrypt: ffi.contract.Contract.DeoxysIIDecryptRequest
      @JvmName("getDecrypt")
      get() = _builder.getDecrypt()
      @JvmName("setDecrypt")
      set(value) {
        _builder.setDecrypt(value)
      }
    /**
     * `.ffi.contract.DeoxysIIDecryptRequest decrypt = 2;`
     */
    public fun clearDecrypt() {
      _builder.clearDecrypt()
    }
    /**
     * `.ffi.contract.DeoxysIIDecryptRequest decrypt = 2;`
     * @return Whether the decrypt field is set.
     */
    public fun hasDecrypt(): kotlin.Boolean {
      return _builder.hasDecrypt()
    }
    public val reqCase: ffi.contract.Contract.FFIRequest.ReqCase
      @JvmName("getReqCase")
      get() = _builder.getReqCase()

    public fun clearReq() {
      _builder.clearReq()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ffi.contract.Contract.FFIRequest.copy(block: ffi.contract.FFIRequestKt.Dsl.() -> kotlin.Unit): ffi.contract.Contract.FFIRequest =
  ffi.contract.FFIRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val ffi.contract.Contract.FFIRequestOrBuilder.encryptOrNull: ffi.contract.Contract.DeoxysIIEncryptRequest?
  get() = if (hasEncrypt()) getEncrypt() else null

public val ffi.contract.Contract.FFIRequestOrBuilder.decryptOrNull: ffi.contract.Contract.DeoxysIIDecryptRequest?
  get() = if (hasDecrypt()) getDecrypt() else null

