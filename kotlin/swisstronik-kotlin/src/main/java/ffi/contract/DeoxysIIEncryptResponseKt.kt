// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: protobuf_contracts/contract.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ffi.contract;

@kotlin.jvm.JvmName("-initializedeoxysIIEncryptResponse")
public inline fun deoxysIIEncryptResponse(block: ffi.contract.DeoxysIIEncryptResponseKt.Dsl.() -> kotlin.Unit): ffi.contract.Contract.DeoxysIIEncryptResponse =
  ffi.contract.DeoxysIIEncryptResponseKt.Dsl._create(ffi.contract.Contract.DeoxysIIEncryptResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `ffi.contract.DeoxysIIEncryptResponse`
 */
public object DeoxysIIEncryptResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ffi.contract.Contract.DeoxysIIEncryptResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ffi.contract.Contract.DeoxysIIEncryptResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ffi.contract.Contract.DeoxysIIEncryptResponse = _builder.build()

    /**
     * `.ffi.contract.DeoxysIIEncryptSuccessResponse success = 1;`
     */
    public var success: ffi.contract.Contract.DeoxysIIEncryptSuccessResponse
      @JvmName("getSuccess")
      get() = _builder.getSuccess()
      @JvmName("setSuccess")
      set(value) {
        _builder.setSuccess(value)
      }
    /**
     * `.ffi.contract.DeoxysIIEncryptSuccessResponse success = 1;`
     */
    public fun clearSuccess() {
      _builder.clearSuccess()
    }
    /**
     * `.ffi.contract.DeoxysIIEncryptSuccessResponse success = 1;`
     * @return Whether the success field is set.
     */
    public fun hasSuccess(): kotlin.Boolean {
      return _builder.hasSuccess()
    }

    /**
     * `.ffi.contract.DeoxysIIEncryptFailureResponse failure = 2;`
     */
    public var failure: ffi.contract.Contract.DeoxysIIEncryptFailureResponse
      @JvmName("getFailure")
      get() = _builder.getFailure()
      @JvmName("setFailure")
      set(value) {
        _builder.setFailure(value)
      }
    /**
     * `.ffi.contract.DeoxysIIEncryptFailureResponse failure = 2;`
     */
    public fun clearFailure() {
      _builder.clearFailure()
    }
    /**
     * `.ffi.contract.DeoxysIIEncryptFailureResponse failure = 2;`
     * @return Whether the failure field is set.
     */
    public fun hasFailure(): kotlin.Boolean {
      return _builder.hasFailure()
    }
    public val responseCase: ffi.contract.Contract.DeoxysIIEncryptResponse.ResponseCase
      @JvmName("getResponseCase")
      get() = _builder.getResponseCase()

    public fun clearResponse() {
      _builder.clearResponse()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ffi.contract.Contract.DeoxysIIEncryptResponse.copy(block: ffi.contract.DeoxysIIEncryptResponseKt.Dsl.() -> kotlin.Unit): ffi.contract.Contract.DeoxysIIEncryptResponse =
  ffi.contract.DeoxysIIEncryptResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val ffi.contract.Contract.DeoxysIIEncryptResponseOrBuilder.successOrNull: ffi.contract.Contract.DeoxysIIEncryptSuccessResponse?
  get() = if (hasSuccess()) getSuccess() else null

public val ffi.contract.Contract.DeoxysIIEncryptResponseOrBuilder.failureOrNull: ffi.contract.Contract.DeoxysIIEncryptFailureResponse?
  get() = if (hasFailure()) getFailure() else null

