// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 23.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `contract.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ffi.contract.DeserializationError)
pub struct DeserializationError {
    // message fields
    // @@protoc_insertion_point(field:ffi.contract.DeserializationError.field_name)
    pub field_name: ::std::string::String,
    // @@protoc_insertion_point(field:ffi.contract.DeserializationError.description)
    pub description: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ffi.contract.DeserializationError.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeserializationError {
    fn default() -> &'a DeserializationError {
        <DeserializationError as ::protobuf::Message>::default_instance()
    }
}

impl DeserializationError {
    pub fn new() -> DeserializationError {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "field_name",
            |m: &DeserializationError| { &m.field_name },
            |m: &mut DeserializationError| { &mut m.field_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &DeserializationError| { &m.description },
            |m: &mut DeserializationError| { &mut m.description },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeserializationError>(
            "DeserializationError",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeserializationError {
    const NAME: &'static str = "DeserializationError";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.field_name = is.read_string()?;
                },
                18 => {
                    self.description = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.field_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.field_name.is_empty() {
            os.write_string(1, &self.field_name)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeserializationError {
        DeserializationError::new()
    }

    fn clear(&mut self) {
        self.field_name.clear();
        self.description.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeserializationError {
        static instance: DeserializationError = DeserializationError {
            field_name: ::std::string::String::new(),
            description: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeserializationError {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeserializationError").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeserializationError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeserializationError {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ffi.contract.BytearrayWrongLengthError)
pub struct BytearrayWrongLengthError {
    // message fields
    // @@protoc_insertion_point(field:ffi.contract.BytearrayWrongLengthError.field_name)
    pub field_name: ::std::string::String,
    // @@protoc_insertion_point(field:ffi.contract.BytearrayWrongLengthError.expected_length)
    pub expected_length: u32,
    // @@protoc_insertion_point(field:ffi.contract.BytearrayWrongLengthError.actual_length)
    pub actual_length: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ffi.contract.BytearrayWrongLengthError.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BytearrayWrongLengthError {
    fn default() -> &'a BytearrayWrongLengthError {
        <BytearrayWrongLengthError as ::protobuf::Message>::default_instance()
    }
}

impl BytearrayWrongLengthError {
    pub fn new() -> BytearrayWrongLengthError {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "field_name",
            |m: &BytearrayWrongLengthError| { &m.field_name },
            |m: &mut BytearrayWrongLengthError| { &mut m.field_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expected_length",
            |m: &BytearrayWrongLengthError| { &m.expected_length },
            |m: &mut BytearrayWrongLengthError| { &mut m.expected_length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "actual_length",
            |m: &BytearrayWrongLengthError| { &m.actual_length },
            |m: &mut BytearrayWrongLengthError| { &mut m.actual_length },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BytearrayWrongLengthError>(
            "BytearrayWrongLengthError",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BytearrayWrongLengthError {
    const NAME: &'static str = "BytearrayWrongLengthError";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.field_name = is.read_string()?;
                },
                16 => {
                    self.expected_length = is.read_uint32()?;
                },
                24 => {
                    self.actual_length = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.field_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_name);
        }
        if self.expected_length != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.expected_length);
        }
        if self.actual_length != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.actual_length);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.field_name.is_empty() {
            os.write_string(1, &self.field_name)?;
        }
        if self.expected_length != 0 {
            os.write_uint32(2, self.expected_length)?;
        }
        if self.actual_length != 0 {
            os.write_uint32(3, self.actual_length)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BytearrayWrongLengthError {
        BytearrayWrongLengthError::new()
    }

    fn clear(&mut self) {
        self.field_name.clear();
        self.expected_length = 0;
        self.actual_length = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BytearrayWrongLengthError {
        static instance: BytearrayWrongLengthError = BytearrayWrongLengthError {
            field_name: ::std::string::String::new(),
            expected_length: 0,
            actual_length: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BytearrayWrongLengthError {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BytearrayWrongLengthError").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BytearrayWrongLengthError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BytearrayWrongLengthError {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ffi.contract.FFIRequest)
pub struct FFIRequest {
    // message oneof groups
    pub req: ::std::option::Option<ffirequest::Req>,
    // special fields
    // @@protoc_insertion_point(special_field:ffi.contract.FFIRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FFIRequest {
    fn default() -> &'a FFIRequest {
        <FFIRequest as ::protobuf::Message>::default_instance()
    }
}

impl FFIRequest {
    pub fn new() -> FFIRequest {
        ::std::default::Default::default()
    }

    // .ffi.contract.DeoxysIIEncryptRequest encrypt = 1;

    pub fn encrypt(&self) -> &DeoxysIIEncryptRequest {
        match self.req {
            ::std::option::Option::Some(ffirequest::Req::Encrypt(ref v)) => v,
            _ => <DeoxysIIEncryptRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_encrypt(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_encrypt(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(ffirequest::Req::Encrypt(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_encrypt(&mut self, v: DeoxysIIEncryptRequest) {
        self.req = ::std::option::Option::Some(ffirequest::Req::Encrypt(v))
    }

    // Mutable pointer to the field.
    pub fn mut_encrypt(&mut self) -> &mut DeoxysIIEncryptRequest {
        if let ::std::option::Option::Some(ffirequest::Req::Encrypt(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(ffirequest::Req::Encrypt(DeoxysIIEncryptRequest::new()));
        }
        match self.req {
            ::std::option::Option::Some(ffirequest::Req::Encrypt(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_encrypt(&mut self) -> DeoxysIIEncryptRequest {
        if self.has_encrypt() {
            match self.req.take() {
                ::std::option::Option::Some(ffirequest::Req::Encrypt(v)) => v,
                _ => panic!(),
            }
        } else {
            DeoxysIIEncryptRequest::new()
        }
    }

    // .ffi.contract.DeoxysIIDecryptRequest decrypt = 2;

    pub fn decrypt(&self) -> &DeoxysIIDecryptRequest {
        match self.req {
            ::std::option::Option::Some(ffirequest::Req::Decrypt(ref v)) => v,
            _ => <DeoxysIIDecryptRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_decrypt(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_decrypt(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(ffirequest::Req::Decrypt(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_decrypt(&mut self, v: DeoxysIIDecryptRequest) {
        self.req = ::std::option::Option::Some(ffirequest::Req::Decrypt(v))
    }

    // Mutable pointer to the field.
    pub fn mut_decrypt(&mut self) -> &mut DeoxysIIDecryptRequest {
        if let ::std::option::Option::Some(ffirequest::Req::Decrypt(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(ffirequest::Req::Decrypt(DeoxysIIDecryptRequest::new()));
        }
        match self.req {
            ::std::option::Option::Some(ffirequest::Req::Decrypt(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_decrypt(&mut self) -> DeoxysIIDecryptRequest {
        if self.has_decrypt() {
            match self.req.take() {
                ::std::option::Option::Some(ffirequest::Req::Decrypt(v)) => v,
                _ => panic!(),
            }
        } else {
            DeoxysIIDecryptRequest::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DeoxysIIEncryptRequest>(
            "encrypt",
            FFIRequest::has_encrypt,
            FFIRequest::encrypt,
            FFIRequest::mut_encrypt,
            FFIRequest::set_encrypt,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DeoxysIIDecryptRequest>(
            "decrypt",
            FFIRequest::has_decrypt,
            FFIRequest::decrypt,
            FFIRequest::mut_decrypt,
            FFIRequest::set_decrypt,
        ));
        oneofs.push(ffirequest::Req::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FFIRequest>(
            "FFIRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FFIRequest {
    const NAME: &'static str = "FFIRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.req = ::std::option::Option::Some(ffirequest::Req::Encrypt(is.read_message()?));
                },
                18 => {
                    self.req = ::std::option::Option::Some(ffirequest::Req::Decrypt(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.req {
            match v {
                &ffirequest::Req::Encrypt(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ffirequest::Req::Decrypt(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.req {
            match v {
                &ffirequest::Req::Encrypt(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &ffirequest::Req::Decrypt(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FFIRequest {
        FFIRequest::new()
    }

    fn clear(&mut self) {
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FFIRequest {
        static instance: FFIRequest = FFIRequest {
            req: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FFIRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FFIRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FFIRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FFIRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FFIRequest`
pub mod ffirequest {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ffi.contract.FFIRequest.req)
    pub enum Req {
        // @@protoc_insertion_point(oneof_field:ffi.contract.FFIRequest.encrypt)
        Encrypt(super::DeoxysIIEncryptRequest),
        // @@protoc_insertion_point(oneof_field:ffi.contract.FFIRequest.decrypt)
        Decrypt(super::DeoxysIIDecryptRequest),
    }

    impl ::protobuf::Oneof for Req {
    }

    impl ::protobuf::OneofFull for Req {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::FFIRequest as ::protobuf::MessageFull>::descriptor().oneof_by_name("req").unwrap()).clone()
        }
    }

    impl Req {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Req>("req")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ffi.contract.DeoxysIIEncryptRequest)
pub struct DeoxysIIEncryptRequest {
    // message fields
    // @@protoc_insertion_point(field:ffi.contract.DeoxysIIEncryptRequest.private_key)
    pub private_key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ffi.contract.DeoxysIIEncryptRequest.data)
    pub data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ffi.contract.DeoxysIIEncryptRequest.node_public_key)
    pub node_public_key: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:ffi.contract.DeoxysIIEncryptRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeoxysIIEncryptRequest {
    fn default() -> &'a DeoxysIIEncryptRequest {
        <DeoxysIIEncryptRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeoxysIIEncryptRequest {
    pub fn new() -> DeoxysIIEncryptRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "private_key",
            |m: &DeoxysIIEncryptRequest| { &m.private_key },
            |m: &mut DeoxysIIEncryptRequest| { &mut m.private_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &DeoxysIIEncryptRequest| { &m.data },
            |m: &mut DeoxysIIEncryptRequest| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_public_key",
            |m: &DeoxysIIEncryptRequest| { &m.node_public_key },
            |m: &mut DeoxysIIEncryptRequest| { &mut m.node_public_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeoxysIIEncryptRequest>(
            "DeoxysIIEncryptRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeoxysIIEncryptRequest {
    const NAME: &'static str = "DeoxysIIEncryptRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.private_key = is.read_bytes()?;
                },
                18 => {
                    self.data = is.read_bytes()?;
                },
                26 => {
                    self.node_public_key = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.private_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.private_key);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        if !self.node_public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.node_public_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.private_key.is_empty() {
            os.write_bytes(1, &self.private_key)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        if !self.node_public_key.is_empty() {
            os.write_bytes(3, &self.node_public_key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeoxysIIEncryptRequest {
        DeoxysIIEncryptRequest::new()
    }

    fn clear(&mut self) {
        self.private_key.clear();
        self.data.clear();
        self.node_public_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeoxysIIEncryptRequest {
        static instance: DeoxysIIEncryptRequest = DeoxysIIEncryptRequest {
            private_key: ::std::vec::Vec::new(),
            data: ::std::vec::Vec::new(),
            node_public_key: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeoxysIIEncryptRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeoxysIIEncryptRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeoxysIIEncryptRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeoxysIIEncryptRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ffi.contract.DeoxysIIEncryptResponse)
pub struct DeoxysIIEncryptResponse {
    // message oneof groups
    pub response: ::std::option::Option<deoxys_iiencrypt_response::Response>,
    // special fields
    // @@protoc_insertion_point(special_field:ffi.contract.DeoxysIIEncryptResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeoxysIIEncryptResponse {
    fn default() -> &'a DeoxysIIEncryptResponse {
        <DeoxysIIEncryptResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeoxysIIEncryptResponse {
    pub fn new() -> DeoxysIIEncryptResponse {
        ::std::default::Default::default()
    }

    // .ffi.contract.DeoxysIIEncryptSuccessResponse success = 1;

    pub fn success(&self) -> &DeoxysIIEncryptSuccessResponse {
        match self.response {
            ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Success(ref v)) => v,
            _ => <DeoxysIIEncryptSuccessResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_success(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Success(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: DeoxysIIEncryptSuccessResponse) {
        self.response = ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Success(v))
    }

    // Mutable pointer to the field.
    pub fn mut_success(&mut self) -> &mut DeoxysIIEncryptSuccessResponse {
        if let ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Success(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Success(DeoxysIIEncryptSuccessResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Success(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_success(&mut self) -> DeoxysIIEncryptSuccessResponse {
        if self.has_success() {
            match self.response.take() {
                ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Success(v)) => v,
                _ => panic!(),
            }
        } else {
            DeoxysIIEncryptSuccessResponse::new()
        }
    }

    // .ffi.contract.DeoxysIIEncryptFailureResponse failure = 2;

    pub fn failure(&self) -> &DeoxysIIEncryptFailureResponse {
        match self.response {
            ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Failure(ref v)) => v,
            _ => <DeoxysIIEncryptFailureResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_failure(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_failure(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Failure(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_failure(&mut self, v: DeoxysIIEncryptFailureResponse) {
        self.response = ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Failure(v))
    }

    // Mutable pointer to the field.
    pub fn mut_failure(&mut self) -> &mut DeoxysIIEncryptFailureResponse {
        if let ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Failure(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Failure(DeoxysIIEncryptFailureResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Failure(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_failure(&mut self) -> DeoxysIIEncryptFailureResponse {
        if self.has_failure() {
            match self.response.take() {
                ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Failure(v)) => v,
                _ => panic!(),
            }
        } else {
            DeoxysIIEncryptFailureResponse::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DeoxysIIEncryptSuccessResponse>(
            "success",
            DeoxysIIEncryptResponse::has_success,
            DeoxysIIEncryptResponse::success,
            DeoxysIIEncryptResponse::mut_success,
            DeoxysIIEncryptResponse::set_success,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DeoxysIIEncryptFailureResponse>(
            "failure",
            DeoxysIIEncryptResponse::has_failure,
            DeoxysIIEncryptResponse::failure,
            DeoxysIIEncryptResponse::mut_failure,
            DeoxysIIEncryptResponse::set_failure,
        ));
        oneofs.push(deoxys_iiencrypt_response::Response::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeoxysIIEncryptResponse>(
            "DeoxysIIEncryptResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeoxysIIEncryptResponse {
    const NAME: &'static str = "DeoxysIIEncryptResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.response = ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Success(is.read_message()?));
                },
                18 => {
                    self.response = ::std::option::Option::Some(deoxys_iiencrypt_response::Response::Failure(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &deoxys_iiencrypt_response::Response::Success(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &deoxys_iiencrypt_response::Response::Failure(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &deoxys_iiencrypt_response::Response::Success(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &deoxys_iiencrypt_response::Response::Failure(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeoxysIIEncryptResponse {
        DeoxysIIEncryptResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeoxysIIEncryptResponse {
        static instance: DeoxysIIEncryptResponse = DeoxysIIEncryptResponse {
            response: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeoxysIIEncryptResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeoxysIIEncryptResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeoxysIIEncryptResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeoxysIIEncryptResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DeoxysIIEncryptResponse`
pub mod deoxys_iiencrypt_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ffi.contract.DeoxysIIEncryptResponse.response)
    pub enum Response {
        // @@protoc_insertion_point(oneof_field:ffi.contract.DeoxysIIEncryptResponse.success)
        Success(super::DeoxysIIEncryptSuccessResponse),
        // @@protoc_insertion_point(oneof_field:ffi.contract.DeoxysIIEncryptResponse.failure)
        Failure(super::DeoxysIIEncryptFailureResponse),
    }

    impl ::protobuf::Oneof for Response {
    }

    impl ::protobuf::OneofFull for Response {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::DeoxysIIEncryptResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("response").unwrap()).clone()
        }
    }

    impl Response {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Response>("response")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ffi.contract.DeoxysIIEncryptSuccessResponse)
pub struct DeoxysIIEncryptSuccessResponse {
    // message fields
    // @@protoc_insertion_point(field:ffi.contract.DeoxysIIEncryptSuccessResponse.result)
    pub result: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:ffi.contract.DeoxysIIEncryptSuccessResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeoxysIIEncryptSuccessResponse {
    fn default() -> &'a DeoxysIIEncryptSuccessResponse {
        <DeoxysIIEncryptSuccessResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeoxysIIEncryptSuccessResponse {
    pub fn new() -> DeoxysIIEncryptSuccessResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "result",
            |m: &DeoxysIIEncryptSuccessResponse| { &m.result },
            |m: &mut DeoxysIIEncryptSuccessResponse| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeoxysIIEncryptSuccessResponse>(
            "DeoxysIIEncryptSuccessResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeoxysIIEncryptSuccessResponse {
    const NAME: &'static str = "DeoxysIIEncryptSuccessResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.result = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.result.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.result);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.result.is_empty() {
            os.write_bytes(1, &self.result)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeoxysIIEncryptSuccessResponse {
        DeoxysIIEncryptSuccessResponse::new()
    }

    fn clear(&mut self) {
        self.result.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeoxysIIEncryptSuccessResponse {
        static instance: DeoxysIIEncryptSuccessResponse = DeoxysIIEncryptSuccessResponse {
            result: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeoxysIIEncryptSuccessResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeoxysIIEncryptSuccessResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeoxysIIEncryptSuccessResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeoxysIIEncryptSuccessResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ffi.contract.DeoxysIIEncryptFailureResponse)
pub struct DeoxysIIEncryptFailureResponse {
    // message oneof groups
    pub error: ::std::option::Option<deoxys_iiencrypt_failure_response::Error>,
    // special fields
    // @@protoc_insertion_point(special_field:ffi.contract.DeoxysIIEncryptFailureResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeoxysIIEncryptFailureResponse {
    fn default() -> &'a DeoxysIIEncryptFailureResponse {
        <DeoxysIIEncryptFailureResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeoxysIIEncryptFailureResponse {
    pub fn new() -> DeoxysIIEncryptFailureResponse {
        ::std::default::Default::default()
    }

    // string encryption_error = 1;

    pub fn encryption_error(&self) -> &str {
        match self.error {
            ::std::option::Option::Some(deoxys_iiencrypt_failure_response::Error::EncryptionError(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_encryption_error(&mut self) {
        self.error = ::std::option::Option::None;
    }

    pub fn has_encryption_error(&self) -> bool {
        match self.error {
            ::std::option::Option::Some(deoxys_iiencrypt_failure_response::Error::EncryptionError(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_encryption_error(&mut self, v: ::std::string::String) {
        self.error = ::std::option::Option::Some(deoxys_iiencrypt_failure_response::Error::EncryptionError(v))
    }

    // Mutable pointer to the field.
    pub fn mut_encryption_error(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(deoxys_iiencrypt_failure_response::Error::EncryptionError(_)) = self.error {
        } else {
            self.error = ::std::option::Option::Some(deoxys_iiencrypt_failure_response::Error::EncryptionError(::std::string::String::new()));
        }
        match self.error {
            ::std::option::Option::Some(deoxys_iiencrypt_failure_response::Error::EncryptionError(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_encryption_error(&mut self) -> ::std::string::String {
        if self.has_encryption_error() {
            match self.error.take() {
                ::std::option::Option::Some(deoxys_iiencrypt_failure_response::Error::EncryptionError(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "encryption_error",
            DeoxysIIEncryptFailureResponse::has_encryption_error,
            DeoxysIIEncryptFailureResponse::encryption_error,
            DeoxysIIEncryptFailureResponse::set_encryption_error,
        ));
        oneofs.push(deoxys_iiencrypt_failure_response::Error::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeoxysIIEncryptFailureResponse>(
            "DeoxysIIEncryptFailureResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeoxysIIEncryptFailureResponse {
    const NAME: &'static str = "DeoxysIIEncryptFailureResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.error = ::std::option::Option::Some(deoxys_iiencrypt_failure_response::Error::EncryptionError(is.read_string()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.error {
            match v {
                &deoxys_iiencrypt_failure_response::Error::EncryptionError(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.error {
            match v {
                &deoxys_iiencrypt_failure_response::Error::EncryptionError(ref v) => {
                    os.write_string(1, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeoxysIIEncryptFailureResponse {
        DeoxysIIEncryptFailureResponse::new()
    }

    fn clear(&mut self) {
        self.error = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeoxysIIEncryptFailureResponse {
        static instance: DeoxysIIEncryptFailureResponse = DeoxysIIEncryptFailureResponse {
            error: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeoxysIIEncryptFailureResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeoxysIIEncryptFailureResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeoxysIIEncryptFailureResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeoxysIIEncryptFailureResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DeoxysIIEncryptFailureResponse`
pub mod deoxys_iiencrypt_failure_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ffi.contract.DeoxysIIEncryptFailureResponse.error)
    pub enum Error {
        // @@protoc_insertion_point(oneof_field:ffi.contract.DeoxysIIEncryptFailureResponse.encryption_error)
        EncryptionError(::std::string::String),
    }

    impl ::protobuf::Oneof for Error {
    }

    impl ::protobuf::OneofFull for Error {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::DeoxysIIEncryptFailureResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("error").unwrap()).clone()
        }
    }

    impl Error {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Error>("error")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ffi.contract.DeoxysIIDecryptRequest)
pub struct DeoxysIIDecryptRequest {
    // message fields
    // @@protoc_insertion_point(field:ffi.contract.DeoxysIIDecryptRequest.private_key)
    pub private_key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ffi.contract.DeoxysIIDecryptRequest.encrypted_data)
    pub encrypted_data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ffi.contract.DeoxysIIDecryptRequest.node_public_key)
    pub node_public_key: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:ffi.contract.DeoxysIIDecryptRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeoxysIIDecryptRequest {
    fn default() -> &'a DeoxysIIDecryptRequest {
        <DeoxysIIDecryptRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeoxysIIDecryptRequest {
    pub fn new() -> DeoxysIIDecryptRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "private_key",
            |m: &DeoxysIIDecryptRequest| { &m.private_key },
            |m: &mut DeoxysIIDecryptRequest| { &mut m.private_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "encrypted_data",
            |m: &DeoxysIIDecryptRequest| { &m.encrypted_data },
            |m: &mut DeoxysIIDecryptRequest| { &mut m.encrypted_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_public_key",
            |m: &DeoxysIIDecryptRequest| { &m.node_public_key },
            |m: &mut DeoxysIIDecryptRequest| { &mut m.node_public_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeoxysIIDecryptRequest>(
            "DeoxysIIDecryptRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeoxysIIDecryptRequest {
    const NAME: &'static str = "DeoxysIIDecryptRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.private_key = is.read_bytes()?;
                },
                18 => {
                    self.encrypted_data = is.read_bytes()?;
                },
                26 => {
                    self.node_public_key = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.private_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.private_key);
        }
        if !self.encrypted_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.encrypted_data);
        }
        if !self.node_public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.node_public_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.private_key.is_empty() {
            os.write_bytes(1, &self.private_key)?;
        }
        if !self.encrypted_data.is_empty() {
            os.write_bytes(2, &self.encrypted_data)?;
        }
        if !self.node_public_key.is_empty() {
            os.write_bytes(3, &self.node_public_key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeoxysIIDecryptRequest {
        DeoxysIIDecryptRequest::new()
    }

    fn clear(&mut self) {
        self.private_key.clear();
        self.encrypted_data.clear();
        self.node_public_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeoxysIIDecryptRequest {
        static instance: DeoxysIIDecryptRequest = DeoxysIIDecryptRequest {
            private_key: ::std::vec::Vec::new(),
            encrypted_data: ::std::vec::Vec::new(),
            node_public_key: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeoxysIIDecryptRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeoxysIIDecryptRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeoxysIIDecryptRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeoxysIIDecryptRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ffi.contract.DeoxysIIDecryptResponse)
pub struct DeoxysIIDecryptResponse {
    // message oneof groups
    pub response: ::std::option::Option<deoxys_iidecrypt_response::Response>,
    // special fields
    // @@protoc_insertion_point(special_field:ffi.contract.DeoxysIIDecryptResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeoxysIIDecryptResponse {
    fn default() -> &'a DeoxysIIDecryptResponse {
        <DeoxysIIDecryptResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeoxysIIDecryptResponse {
    pub fn new() -> DeoxysIIDecryptResponse {
        ::std::default::Default::default()
    }

    // .ffi.contract.DeoxysIIDecryptSuccessResponse success = 1;

    pub fn success(&self) -> &DeoxysIIDecryptSuccessResponse {
        match self.response {
            ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Success(ref v)) => v,
            _ => <DeoxysIIDecryptSuccessResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_success(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Success(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: DeoxysIIDecryptSuccessResponse) {
        self.response = ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Success(v))
    }

    // Mutable pointer to the field.
    pub fn mut_success(&mut self) -> &mut DeoxysIIDecryptSuccessResponse {
        if let ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Success(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Success(DeoxysIIDecryptSuccessResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Success(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_success(&mut self) -> DeoxysIIDecryptSuccessResponse {
        if self.has_success() {
            match self.response.take() {
                ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Success(v)) => v,
                _ => panic!(),
            }
        } else {
            DeoxysIIDecryptSuccessResponse::new()
        }
    }

    // .ffi.contract.DeoxysIIDecryptFailureResponse failure = 2;

    pub fn failure(&self) -> &DeoxysIIDecryptFailureResponse {
        match self.response {
            ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Failure(ref v)) => v,
            _ => <DeoxysIIDecryptFailureResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_failure(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_failure(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Failure(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_failure(&mut self, v: DeoxysIIDecryptFailureResponse) {
        self.response = ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Failure(v))
    }

    // Mutable pointer to the field.
    pub fn mut_failure(&mut self) -> &mut DeoxysIIDecryptFailureResponse {
        if let ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Failure(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Failure(DeoxysIIDecryptFailureResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Failure(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_failure(&mut self) -> DeoxysIIDecryptFailureResponse {
        if self.has_failure() {
            match self.response.take() {
                ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Failure(v)) => v,
                _ => panic!(),
            }
        } else {
            DeoxysIIDecryptFailureResponse::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DeoxysIIDecryptSuccessResponse>(
            "success",
            DeoxysIIDecryptResponse::has_success,
            DeoxysIIDecryptResponse::success,
            DeoxysIIDecryptResponse::mut_success,
            DeoxysIIDecryptResponse::set_success,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DeoxysIIDecryptFailureResponse>(
            "failure",
            DeoxysIIDecryptResponse::has_failure,
            DeoxysIIDecryptResponse::failure,
            DeoxysIIDecryptResponse::mut_failure,
            DeoxysIIDecryptResponse::set_failure,
        ));
        oneofs.push(deoxys_iidecrypt_response::Response::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeoxysIIDecryptResponse>(
            "DeoxysIIDecryptResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeoxysIIDecryptResponse {
    const NAME: &'static str = "DeoxysIIDecryptResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.response = ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Success(is.read_message()?));
                },
                18 => {
                    self.response = ::std::option::Option::Some(deoxys_iidecrypt_response::Response::Failure(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &deoxys_iidecrypt_response::Response::Success(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &deoxys_iidecrypt_response::Response::Failure(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &deoxys_iidecrypt_response::Response::Success(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &deoxys_iidecrypt_response::Response::Failure(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeoxysIIDecryptResponse {
        DeoxysIIDecryptResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeoxysIIDecryptResponse {
        static instance: DeoxysIIDecryptResponse = DeoxysIIDecryptResponse {
            response: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeoxysIIDecryptResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeoxysIIDecryptResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeoxysIIDecryptResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeoxysIIDecryptResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DeoxysIIDecryptResponse`
pub mod deoxys_iidecrypt_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ffi.contract.DeoxysIIDecryptResponse.response)
    pub enum Response {
        // @@protoc_insertion_point(oneof_field:ffi.contract.DeoxysIIDecryptResponse.success)
        Success(super::DeoxysIIDecryptSuccessResponse),
        // @@protoc_insertion_point(oneof_field:ffi.contract.DeoxysIIDecryptResponse.failure)
        Failure(super::DeoxysIIDecryptFailureResponse),
    }

    impl ::protobuf::Oneof for Response {
    }

    impl ::protobuf::OneofFull for Response {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::DeoxysIIDecryptResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("response").unwrap()).clone()
        }
    }

    impl Response {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Response>("response")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ffi.contract.DeoxysIIDecryptSuccessResponse)
pub struct DeoxysIIDecryptSuccessResponse {
    // message fields
    // @@protoc_insertion_point(field:ffi.contract.DeoxysIIDecryptSuccessResponse.result)
    pub result: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:ffi.contract.DeoxysIIDecryptSuccessResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeoxysIIDecryptSuccessResponse {
    fn default() -> &'a DeoxysIIDecryptSuccessResponse {
        <DeoxysIIDecryptSuccessResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeoxysIIDecryptSuccessResponse {
    pub fn new() -> DeoxysIIDecryptSuccessResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "result",
            |m: &DeoxysIIDecryptSuccessResponse| { &m.result },
            |m: &mut DeoxysIIDecryptSuccessResponse| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeoxysIIDecryptSuccessResponse>(
            "DeoxysIIDecryptSuccessResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeoxysIIDecryptSuccessResponse {
    const NAME: &'static str = "DeoxysIIDecryptSuccessResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.result = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.result.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.result);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.result.is_empty() {
            os.write_bytes(1, &self.result)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeoxysIIDecryptSuccessResponse {
        DeoxysIIDecryptSuccessResponse::new()
    }

    fn clear(&mut self) {
        self.result.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeoxysIIDecryptSuccessResponse {
        static instance: DeoxysIIDecryptSuccessResponse = DeoxysIIDecryptSuccessResponse {
            result: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeoxysIIDecryptSuccessResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeoxysIIDecryptSuccessResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeoxysIIDecryptSuccessResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeoxysIIDecryptSuccessResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ffi.contract.DeoxysIIDecryptFailureResponse)
pub struct DeoxysIIDecryptFailureResponse {
    // message oneof groups
    pub error: ::std::option::Option<deoxys_iidecrypt_failure_response::Error>,
    // special fields
    // @@protoc_insertion_point(special_field:ffi.contract.DeoxysIIDecryptFailureResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeoxysIIDecryptFailureResponse {
    fn default() -> &'a DeoxysIIDecryptFailureResponse {
        <DeoxysIIDecryptFailureResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeoxysIIDecryptFailureResponse {
    pub fn new() -> DeoxysIIDecryptFailureResponse {
        ::std::default::Default::default()
    }

    // string decryption_error = 1;

    pub fn decryption_error(&self) -> &str {
        match self.error {
            ::std::option::Option::Some(deoxys_iidecrypt_failure_response::Error::DecryptionError(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_decryption_error(&mut self) {
        self.error = ::std::option::Option::None;
    }

    pub fn has_decryption_error(&self) -> bool {
        match self.error {
            ::std::option::Option::Some(deoxys_iidecrypt_failure_response::Error::DecryptionError(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_decryption_error(&mut self, v: ::std::string::String) {
        self.error = ::std::option::Option::Some(deoxys_iidecrypt_failure_response::Error::DecryptionError(v))
    }

    // Mutable pointer to the field.
    pub fn mut_decryption_error(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(deoxys_iidecrypt_failure_response::Error::DecryptionError(_)) = self.error {
        } else {
            self.error = ::std::option::Option::Some(deoxys_iidecrypt_failure_response::Error::DecryptionError(::std::string::String::new()));
        }
        match self.error {
            ::std::option::Option::Some(deoxys_iidecrypt_failure_response::Error::DecryptionError(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_decryption_error(&mut self) -> ::std::string::String {
        if self.has_decryption_error() {
            match self.error.take() {
                ::std::option::Option::Some(deoxys_iidecrypt_failure_response::Error::DecryptionError(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "decryption_error",
            DeoxysIIDecryptFailureResponse::has_decryption_error,
            DeoxysIIDecryptFailureResponse::decryption_error,
            DeoxysIIDecryptFailureResponse::set_decryption_error,
        ));
        oneofs.push(deoxys_iidecrypt_failure_response::Error::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeoxysIIDecryptFailureResponse>(
            "DeoxysIIDecryptFailureResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeoxysIIDecryptFailureResponse {
    const NAME: &'static str = "DeoxysIIDecryptFailureResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.error = ::std::option::Option::Some(deoxys_iidecrypt_failure_response::Error::DecryptionError(is.read_string()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.error {
            match v {
                &deoxys_iidecrypt_failure_response::Error::DecryptionError(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.error {
            match v {
                &deoxys_iidecrypt_failure_response::Error::DecryptionError(ref v) => {
                    os.write_string(1, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeoxysIIDecryptFailureResponse {
        DeoxysIIDecryptFailureResponse::new()
    }

    fn clear(&mut self) {
        self.error = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeoxysIIDecryptFailureResponse {
        static instance: DeoxysIIDecryptFailureResponse = DeoxysIIDecryptFailureResponse {
            error: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeoxysIIDecryptFailureResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeoxysIIDecryptFailureResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeoxysIIDecryptFailureResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeoxysIIDecryptFailureResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DeoxysIIDecryptFailureResponse`
pub mod deoxys_iidecrypt_failure_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ffi.contract.DeoxysIIDecryptFailureResponse.error)
    pub enum Error {
        // @@protoc_insertion_point(oneof_field:ffi.contract.DeoxysIIDecryptFailureResponse.decryption_error)
        DecryptionError(::std::string::String),
    }

    impl ::protobuf::Oneof for Error {
    }

    impl ::protobuf::OneofFull for Error {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::DeoxysIIDecryptFailureResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("error").unwrap()).clone()
        }
    }

    impl Error {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Error>("error")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0econtract.proto\x12\x0cffi.contract\"W\n\x14DeserializationError\
    \x12\x1d\n\nfield_name\x18\x01\x20\x01(\tR\tfieldName\x12\x20\n\x0bdescr\
    iption\x18\x02\x20\x01(\tR\x0bdescription\"\x88\x01\n\x19BytearrayWrongL\
    engthError\x12\x1d\n\nfield_name\x18\x01\x20\x01(\tR\tfieldName\x12'\n\
    \x0fexpected_length\x18\x02\x20\x01(\rR\x0eexpectedLength\x12#\n\ractual\
    _length\x18\x03\x20\x01(\rR\x0cactualLength\"\x97\x01\n\nFFIRequest\x12@\
    \n\x07encrypt\x18\x01\x20\x01(\x0b2$.ffi.contract.DeoxysIIEncryptRequest\
    H\0R\x07encrypt\x12@\n\x07decrypt\x18\x02\x20\x01(\x0b2$.ffi.contract.De\
    oxysIIDecryptRequestH\0R\x07decryptB\x05\n\x03req\"u\n\x16DeoxysIIEncryp\
    tRequest\x12\x1f\n\x0bprivate_key\x18\x01\x20\x01(\x0cR\nprivateKey\x12\
    \x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\x12&\n\x0fnode_public_key\
    \x18\x03\x20\x01(\x0cR\rnodePublicKey\"\xb9\x01\n\x17DeoxysIIEncryptResp\
    onse\x12H\n\x07success\x18\x01\x20\x01(\x0b2,.ffi.contract.DeoxysIIEncry\
    ptSuccessResponseH\0R\x07success\x12H\n\x07failure\x18\x02\x20\x01(\x0b2\
    ,.ffi.contract.DeoxysIIEncryptFailureResponseH\0R\x07failureB\n\n\x08res\
    ponse\"8\n\x1eDeoxysIIEncryptSuccessResponse\x12\x16\n\x06result\x18\x01\
    \x20\x01(\x0cR\x06result\"V\n\x1eDeoxysIIEncryptFailureResponse\x12+\n\
    \x10encryption_error\x18\x01\x20\x01(\tH\0R\x0fencryptionErrorB\x07\n\
    \x05error\"\x88\x01\n\x16DeoxysIIDecryptRequest\x12\x1f\n\x0bprivate_key\
    \x18\x01\x20\x01(\x0cR\nprivateKey\x12%\n\x0eencrypted_data\x18\x02\x20\
    \x01(\x0cR\rencryptedData\x12&\n\x0fnode_public_key\x18\x03\x20\x01(\x0c\
    R\rnodePublicKey\"\xb9\x01\n\x17DeoxysIIDecryptResponse\x12H\n\x07succes\
    s\x18\x01\x20\x01(\x0b2,.ffi.contract.DeoxysIIDecryptSuccessResponseH\0R\
    \x07success\x12H\n\x07failure\x18\x02\x20\x01(\x0b2,.ffi.contract.Deoxys\
    IIDecryptFailureResponseH\0R\x07failureB\n\n\x08response\"8\n\x1eDeoxysI\
    IDecryptSuccessResponse\x12\x16\n\x06result\x18\x01\x20\x01(\x0cR\x06res\
    ult\"V\n\x1eDeoxysIIDecryptFailureResponse\x12+\n\x10decryption_error\
    \x18\x01\x20\x01(\tH\0R\x0fdecryptionErrorB\x07\n\x05errorb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(DeserializationError::generated_message_descriptor_data());
            messages.push(BytearrayWrongLengthError::generated_message_descriptor_data());
            messages.push(FFIRequest::generated_message_descriptor_data());
            messages.push(DeoxysIIEncryptRequest::generated_message_descriptor_data());
            messages.push(DeoxysIIEncryptResponse::generated_message_descriptor_data());
            messages.push(DeoxysIIEncryptSuccessResponse::generated_message_descriptor_data());
            messages.push(DeoxysIIEncryptFailureResponse::generated_message_descriptor_data());
            messages.push(DeoxysIIDecryptRequest::generated_message_descriptor_data());
            messages.push(DeoxysIIDecryptResponse::generated_message_descriptor_data());
            messages.push(DeoxysIIDecryptSuccessResponse::generated_message_descriptor_data());
            messages.push(DeoxysIIDecryptFailureResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
